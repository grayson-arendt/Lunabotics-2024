<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
	<gazebo reference="Ebox_link">
		<material>Gazebo/Grey</material>
	</gazebo>
	<gazebo reference="rear_right_wheel_link">
		<material>Gazebo/Blue</material>
	</gazebo>
	<gazebo reference="rear_left_wheel_link">
		<material>Gazebo/Blue</material>
	</gazebo>
	<gazebo reference="front_right_wheel_link">
		<material>Gazebo/Blue</material>
        <mu1 value="0.1"/>
        <mu2 value="0.1"/>
	</gazebo>
	<gazebo reference="front_left_wheel_link">
		<material>Gazebo/Blue</material>
        <mu1 value="0.1" />
        <mu2 value="0.1" />
	</gazebo>
    <gazebo reference="lidar_link">
        <material>Gazebo/Green</material>
        <sensor name="lidar_sensor" type="ray">
            <pose>0 0 0 0 0 0</pose>
            <visualize>true</visualize>
            <update_rate>10.0</update_rate>
            <ray>
                <scan>
                    <horizontal>
                        <samples>720</samples>
                        <resolution>1</resolution>
                        <min_angle>-1.570796</min_angle>
                        <max_angle>1.570796</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <min>0.08</min>
                    <max>10.0</max>
                    <resolution>0.01</resolution>
                </range>
                <noise>
                    <type>gaussian</type>
                    <!-- Noise parameters based on your specific sensor -->
                    <mean>0.0</mean>
                    <stddev>0.01</stddev>
                </noise>
            </ray>
            <plugin name="lidar_sensor_plugin" filename="libgazebo_ros_ray_sensor.so">
                <ros>
                  <!-- Configure namespace and remap to publish to /lidar/pointcloud2 -->
                  <namespace>/lidar</namespace>
                  <remapping>~/out:=pointcloud2</remapping>
                </ros>
                <!-- Output as a PointCloud2, see above for other types -->
                <output_type>sensor_msgs/PointCloud2</output_type>
                <!-- Clip intensity values so all are above 100, optional -->
                <min_intensity>100.0</min_intensity>
                <!-- Frame id for header of output, defaults to sensor's parent link name -->
                <frame_name>lidar_link</frame_name>
              </plugin>
        </sensor>
    </gazebo>
    <gazebo reference="imu_link">
        <material>Gazebo/Green</material>
        <sensor name="imu_sensor" type="imu">
         <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
            <ros>
              <namespace>/imu_link</namespace>
              <remapping>~/out:=imu</remapping>
            </ros>
            <initial_orientation_as_reference>false</initial_orientation_as_reference>
          </plugin>
          <always_on>true</always_on>
          <update_rate>100</update_rate>
          <visualize>true</visualize>
          <imu>
            <angular_velocity>
              <x>
                <noise type="gaussian">
                  <mean>0.0</mean>
                  <stddev>2e-4</stddev>
                  <bias_mean>0.0000075</bias_mean>
                  <bias_stddev>0.0000008</bias_stddev>
                </noise>
              </x>
              <y>
                <noise type="gaussian">
                  <mean>0.0</mean>
                  <stddev>2e-4</stddev>
                  <bias_mean>0.0000075</bias_mean>
                  <bias_stddev>0.0000008</bias_stddev>
                </noise>
              </y>
              <z>
                <noise type="gaussian">
                  <mean>0.0</mean>
                  <stddev>2e-4</stddev>
                  <bias_mean>0.0000075</bias_mean>
                  <bias_stddev>0.0000008</bias_stddev>
                </noise>
              </z>
            </angular_velocity>
            <linear_acceleration>
              <x>
                <noise type="gaussian">
                  <mean>0.0</mean>
                  <stddev>1.7e-2</stddev>
                  <bias_mean>0.1</bias_mean>
                  <bias_stddev>0.001</bias_stddev>
                </noise>
              </x>
              <y>
                <noise type="gaussian">
                  <mean>0.0</mean>
                  <stddev>1.7e-2</stddev>
                  <bias_mean>0.1</bias_mean>
                  <bias_stddev>0.001</bias_stddev>
                </noise>
              </y>
              <z>
                <noise type="gaussian">
                  <mean>0.0</mean>
                  <stddev>1.7e-2</stddev>
                  <bias_mean>0.1</bias_mean>
                  <bias_stddev>0.001</bias_stddev>
                </noise>
              </z>
            </linear_acceleration>
          </imu>
        </sensor>
    </gazebo>
	<gazebo>
		<plugin name="diff_drive_controller" filename="libgazebo_ros_diff_drive.so">    
            <!-- Update rate in Hz -->
			<update_rate>50</update_rate>
			<!-- wheels -->
			<left_joint>base_rear_left_wheel_joint</left_joint>
			<right_joint>base_rear_right_wheel_joint</right_joint>
			<!-- kinematics -->
			<wheel_separation>0.6</wheel_separation>
			<wheel_diameter>0.3</wheel_diameter>
			<!-- limits 
			<max_wheel_torque>20</max_wheel_torque>
			<max_wheel_acceleration>1.0</max_wheel_acceleration> -->
			<!-- input 
			<command_topic>cmd_vel</command_topic> cms_vel is default-->
			<!-- output -->
            <!--keeping track of the robot based on wheel encoders-->
			<publish_odom>true</publish_odom> 
			<publish_odom_tf>true</publish_odom_tf>
			<publish_wheel_tf>true</publish_wheel_tf>
			<odometry_topic>odom</odometry_topic>
			<odometry_frame>odom</odometry_frame>
			<robot_base_frame>base_link</robot_base_frame>
		</plugin>
	</gazebo>
</robot>